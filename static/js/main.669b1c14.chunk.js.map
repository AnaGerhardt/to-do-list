{"version":3,"sources":["Styles/Themes.tsx","Styles/StyledComponents/index.js","Components/Forms/AddForm.tsx","Components/Forms/EditForm.tsx","Components/Tables/ListTable.tsx","App.tsx","serviceWorker.js","index.js"],"names":["lightTheme","color","bg","darkTheme","Button","styled","button","theme","ActionButton","MenuButton","Table","table","Tr","tr","Td","td","AddForm","props","initialFormState","id","undefined","listitem","dateitem","category","useState","item","setItem","handleInputChange","e","target","name","value","Form","onSubmit","event","preventDefault","addItem","Group","Control","type","onChange","placeholder","style","as","Object","entries","categories","map","i","k","v","key","EditForm","currentItem","useEffect","updateItem","ListTable","list","length","className","checked","ev","currentTarget","onClick","checkHandler","editRow","deleteItem","App","setTheme","1","2","3","4","itemArray","setList","editing","setEditing","setCurrentItem","rootStyle","Container","Row","Col","lg","updatedItem","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.669b1c14.chunk.js","sourcesContent":["export const lightTheme = {\r\n    color: '#1890ff',\r\n    bg: 'white'\r\n}\r\n  \r\nexport const darkTheme = {\r\n    color: 'white',\r\n    bg: 'grey'\r\n}","import styled from 'styled-components'\r\n\r\nexport const Button = styled.button`\r\n  background: ${({theme}) => theme.bg};\r\n  color: ${({theme}) => theme.color};\r\n  border: 1px solid ${({theme}) => theme.color};\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n`\r\n\r\nexport const ActionButton = styled.button`\r\n  background: ${({theme}) => theme.color};\r\n  color: ${({theme}) => theme.bg};\r\n  border: 1px solid ${({theme}) => theme.color};\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n`\r\n\r\nexport const MenuButton = styled.button`\r\n  background: ${({theme}) => theme.bg};\r\n  color: ${({theme}) => theme.color};\r\n  border: none;\r\n  border-right: 1px solid ${({theme}) => theme.color};\r\n  padding: 5px 10px 5px 10px;\r\n`\r\n\r\nexport const Table = styled.table`\r\n   margin: 40px 0 40px 0; \r\n` \r\n\r\nexport const Tr = styled.tr`\r\n    border-bottom: 1px solid #AAAA;\r\n` \r\n\r\nexport const Td = styled.td`\r\n    padding: 1vh 8vw 1vh 0vw;\r\n`  ","import React, { useState } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport { Button } from '../../Styles/StyledComponents'\r\n\r\n\r\n\r\ninterface IProps {\r\n    addItem: Function\r\n    categories: Object\r\n}\r\n\r\n\r\nconst AddForm = (props: IProps) => {\r\n\r\n\r\n    const initialFormState = { id: undefined, listitem: '', dateitem: '', category: undefined }\r\n    const [item, setItem] = useState(initialFormState)\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target\r\n        setItem({ ...item, [name]: value })\r\n    }\r\n\r\n\r\n    return  (\r\n\r\n        <Form\r\n            onSubmit={(event: { preventDefault: () => void; }) => {\r\n                event.preventDefault()\r\n                if (!item.listitem) return\r\n                    props.addItem(item)\r\n                    setItem(initialFormState)\r\n            }}\r\n        >\r\n\r\n            <Form.Group>\r\n                <Form.Control\r\n                    type=\"text\" \r\n                    name=\"listitem\"\r\n                    value={item.listitem}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"New task\" \r\n                />      \r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n                <Form.Control\r\n                    type=\"date\"\r\n                    name=\"dateitem\"\r\n                    value={item.dateitem}\r\n                    onChange={handleInputChange}\r\n                    style={{'width':'70%'}}\r\n                />\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n                <Form.Control \r\n                    as=\"select\"\r\n                    name=\"category\"\r\n                    onChange={handleInputChange}\r\n                    style={{'width':'70%'}}\r\n                > \r\n                {Object.entries(props.categories).map(([k,v], i)=> (\r\n                    <option key={k}>{v}</option>\r\n                ))}\r\n                </Form.Control>     \r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\">\r\n                Done!\r\n            </Button>\r\n        </Form>\r\n    )       \r\n}\r\n\r\nexport default AddForm","import * as React from 'react'\r\nimport { useState, useEffect, Dispatch, SetStateAction } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport { Button } from '../../Styles/StyledComponents'\r\nimport { Item } from '../../App'\r\n\r\n\r\n\r\ninterface IProps {\r\n    currentItem: Item\r\n    updateItem: Function\r\n    setEditing: Dispatch<SetStateAction<boolean>>\r\n    editing: boolean\r\n    categories: Object\r\n}\r\n\r\nconst EditForm = (props: IProps) => {\r\n\r\n    const [item, setItem] = useState(props.currentItem)\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target\r\n        setItem({ ...item, [name]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setItem(props.currentItem)\r\n    }, [props])\r\n\r\n    return  (\r\n        <Form\r\n            onSubmit={(event: { preventDefault: () => void; }) => {\r\n                event.preventDefault()\r\n                if (!item.listitem) return \r\n                    props.updateItem(item.id, item)\r\n            }}\r\n        >\r\n           <Form.Group>\r\n                <Form.Control\r\n                    type=\"text\" \r\n                    name=\"listitem\"\r\n                    value={item.listitem}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"* Add a new task\" \r\n                />      \r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n                <Form.Control\r\n                    type=\"date\"\r\n                    name=\"dateitem\"\r\n                    //value={item.dateitem}\r\n                    onChange={handleInputChange}\r\n                    style={{'width':'70%'}}\r\n                />\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n                <Form.Control \r\n                    as=\"select\"\r\n                    name=\"category\"\r\n                    onChange={handleInputChange}\r\n                    style={{'width':'70%'}}\r\n                > \r\n                {Object.entries(props.categories).map(([k,v], i)=> (\r\n                    <option key={k}>{v}</option>\r\n                ))}\r\n                </Form.Control>     \r\n            </Form.Group>\r\n\r\n\r\n            <Button type=\"submit\">\r\n                Done!\r\n            </Button>\r\n        </Form>\r\n    )       \r\n}\r\n\r\nexport default EditForm","import React from 'react'\r\nimport { Item } from '../../App'\r\nimport { ActionButton, Table, Tr, Td } from '../../Styles/StyledComponents'\r\n\r\n\r\n\r\ninterface IProps {\r\n    list: Item[]\r\n    theme?: boolean\r\n    checkHandler: Function\r\n    editRow: Function\r\n    deleteItem: Function\r\n    map?: Function\r\n  }\r\n\r\nconst ListTable = (props: Item & IProps) => {\r\n\r\n    return (\r\n    <Table>\r\n        <thead>\r\n            <Tr>\r\n             <th>Tasks</th>\r\n             <th>Date</th>\r\n             <th>Actions</th>\r\n            </Tr>\r\n        </thead>\r\n        <tbody>\r\n            {props.list.length > 0 ? (\r\n               props.list.map(item => (      \r\n                <Tr key={item.id} className={item.checked ? 'completed' : ''}>\r\n                <Td><input\r\n                        type=\"checkbox\"\r\n                        style={{'marginRight': '10px'}} \r\n                        //name={item.id}\r\n                        onChange={ev => {\r\n                            item.checked = ev.currentTarget.checked\r\n                        }}\r\n                        onClick={() => props.checkHandler(item.id)}\r\n                    />\r\n                    {item.listitem}\r\n                </Td>\r\n                <Td>{item.dateitem}</Td>\r\n                <Td>\r\n                    <ActionButton \r\n                        onClick={() => {props.editRow(item)}}\r\n                        style={{'marginRight': '5px'}}                      \r\n                    >\r\n                        Edit\r\n                    </ActionButton>\r\n                     <ActionButton \r\n                        onClick={() => props.deleteItem(item.id)}                     \r\n                    >\r\n                        Delete\r\n                    </ActionButton>\r\n                </Td>\r\n                </Tr>\r\n               ))\r\n            ) : (\r\n                <Tr>\r\n                    <Td>No items yet.</Td>\r\n                    <Td></Td>\r\n                    <Td></Td>\r\n                </Tr>\r\n            )}\r\n        </tbody>\r\n    </Table>\r\n    )\r\n}\r\n\r\nexport default ListTable","import React, { useState } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { lightTheme, darkTheme } from './Styles/Themes'\r\nimport { Button, ActionButton, MenuButton } from './Styles/StyledComponents'\r\nimport AddForm from './Components/Forms/AddForm'\r\nimport EditForm from './Components/Forms/EditForm'\r\nimport ListTable from './Components/Tables/ListTable'\r\n\r\n\r\nexport interface Item {\r\n  id?: number\r\n  checked?: boolean\r\n  dateitem?: Date\r\n  listitem?: string\r\n  name?: string\r\n  length?: number\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [theme, setTheme] = useState('light')\r\n\r\n  const categories = {\r\n    1: 'Family',\r\n    2: 'Personal',\r\n    3: 'Travel',\r\n    4: 'Work'\r\n}\r\n\r\n  const itemArray = [\r\n    { id: 1, listitem: 'Wash clothes', dateitem: undefined, category: 'Personal' },\r\n    { id: 2, listitem: 'Take pets to the vet', dateitem: undefined, category: 'Personal'},\r\n    { id: 3, listitem: 'Deposit money', dateitem: undefined, category: 'Personal' },\r\n  ]\r\n\r\n  const initialFormState = { id: undefined, listitem: '', dateitem: undefined }\r\n\r\n  const [list, setList] = useState<Item[]>(itemArray)\r\n  const [editing, setEditing] = useState(false)\r\n  const [currentItem, setCurrentItem] = useState<Item>(initialFormState)\r\n\r\n  const addItem = (item: Item) => {\r\n    item.id = list.length + 1\r\n    setList([...list, item])\r\n  }\r\n\r\n  const deleteItem = (id: Item) => {\r\n    setList(list.filter((item: Item) => item.id !== id))\r\n  }\r\n\r\n  const editRow = (item: Item) => {\r\n    setEditing(true)\r\n    setCurrentItem({ id: item.id, checked: item.checked, listitem: item.listitem })\r\n  }\r\n\r\n  const updateItem = (id: Item, updatedItem: Item) => {\r\n    setEditing(false)\r\n    setList(list.map(item => (item.id === id ? updatedItem : item)))\r\n  }\r\n  \r\n  const deleteAllChecked = () => {\r\n    setList(list.filter(item => !item.checked))\r\n  }\r\n\r\n  const checkHandler = (id: Item) => {\r\n    setList(\r\n      list.map (item => {\r\n        if (item.id === id) {\r\n          item.checked = !item.checked\r\n        }\r\n        return item\r\n      })\r\n    )\r\n  }\r\n\r\n  const toggleTheme = () => {\r\n    if (theme === 'light') {\r\n      setTheme('dark');\r\n    } else {\r\n      setTheme('light');\r\n    }\r\n  }\r\n\r\n  const rootStyle = (\r\n    (theme === 'light') ? \r\n      {'background':'white', 'color': 'grey'} \r\n      : \r\n      {'background':'grey', 'color': 'white'}\r\n  )\r\n\r\n\r\n  return (\r\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\r\n      <Container className=\"root\" style={rootStyle}>\r\n\r\n        <Row>\r\n          <Col>\r\n            <h4>My \"To Do\" List</h4>\r\n          </Col>\r\n          <Col style={{'textAlign':'right'}}>\r\n            <ActionButton\r\n              onClick={toggleTheme}\r\n            >\r\n              {theme === 'light' ? 'Night Mode' : 'Light Mode'}\r\n            </ActionButton>\r\n          </Col>\r\n        </Row>\r\n\r\n        <br />\r\n\r\n        <Row>\r\n          <Col lg={6}>\r\n            {editing ? \r\n              (<EditForm editing={editing} setEditing={setEditing} updateItem={updateItem} currentItem={currentItem} categories={categories} />) \r\n              : \r\n              (<AddForm addItem={addItem} categories={categories} />)\r\n            }\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row style={{'marginTop':'20px'}}>\r\n          <Col style={{'textAlign':'center'}}>\r\n            <MenuButton>Family</MenuButton>\r\n            <MenuButton>Personal</MenuButton>\r\n            <MenuButton>Travel</MenuButton>\r\n            <MenuButton>Work</MenuButton>\r\n            <MenuButton style={{'border': 'none'}}>View All</MenuButton>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <ListTable \r\n              list={list} \r\n              deleteItem={deleteItem} \r\n              editRow={editRow} \r\n              checkHandler={checkHandler} \r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <Button\r\n              onClick={deleteAllChecked}\r\n            >\r\n              Delete All Checked\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}