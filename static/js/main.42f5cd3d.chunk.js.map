{"version":3,"sources":["Styles/Themes.tsx","Styles/StyledComponents/index.js","Components/Categories.js","Components/Forms/AddForm.tsx","Components/Forms/DetailForm.tsx","Components/Tables/ListTable.tsx","App.tsx","serviceWorker.js","index.js"],"names":["lightTheme","color","bg","darkTheme","Button","styled","button","theme","ActionButton","MenuButton","TaskButton","Table","table","Tr","tr","Td","td","Categories","1","2","3","4","AddForm","props","initialFormState","id","undefined","listitem","additionalnotes","dateitem","category","useState","item","setItem","show","setShow","handleClose","handleInputChange","e","target","name","value","onClick","Modal","centered","onHide","Header","closeButton","Title","Body","Form","onSubmit","event","preventDefault","addItem","Group","Control","type","onChange","placeholder","style","as","Object","entries","map","i","k","v","key","DetailForm","editing","setEditing","currentItem","useEffect","editRow","className","checked","updateItem","readOnly","Row","Col","deleteItem","ListTable","list","length","ev","currentTarget","checkHandler","selectAll","setList","filter","App","itemArray","setCurrentItem","setTheme","rootStyle","Container","updatedItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42f5cd3d.chunk.js","sourcesContent":["export const lightTheme = {\r\n    color: '#1890ff',\r\n    bg: 'white'\r\n}\r\n  \r\nexport const darkTheme = {\r\n    color: 'white',\r\n    bg: 'grey'\r\n}","import styled from 'styled-components'\r\n\r\nexport const Button = styled.button`\r\n  background: ${({theme}) => theme.bg};\r\n  color: ${({theme}) => theme.color};\r\n  border: 1px solid ${({theme}) => theme.color};\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n`\r\n\r\nexport const ActionButton = styled.button`\r\n  background: ${({theme}) => theme.color};\r\n  color: ${({theme}) => theme.bg};\r\n  border: 1px solid ${({theme}) => theme.color};\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n`\r\n\r\nexport const MenuButton = styled.button`\r\n  background: none;\r\n  color: ${({theme}) => theme.color};\r\n  border: none;\r\n  border-right: 1px solid ${({theme}) => theme.color};\r\n  padding: 5px 10px 5px 10px;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nexport const TaskButton = styled.button`\r\n  background: none;\r\n  color: inherit;\r\n  border: none;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nexport const Table = styled.table`\r\n   margin: 40px 0 40px 0; \r\n` \r\n\r\nexport const Tr = styled.tr`\r\n    border-bottom: 1px solid #AAAA;\r\n` \r\n\r\nexport const Td = styled.td`\r\n    padding: 1vh 8vw 1vh 0vw;\r\n`  ","const Categories = {\r\n    1: 'Family',\r\n    2: 'Personal',\r\n    3: 'Travel',\r\n    4: 'Work'\r\n}\r\n\r\nexport default Categories","import React, { useState } from 'react'\r\nimport { Modal, Form } from 'react-bootstrap'\r\nimport { Button } from '../../Styles/StyledComponents'\r\nimport Categories from '../Categories'\r\n\r\n\r\n\r\ninterface IProps {\r\n    addItem: Function\r\n}\r\n\r\n\r\nconst AddForm = (props: IProps) => {\r\n\r\n\r\n    const initialFormState = { id: undefined, listitem: '', additionalnotes: '', dateitem: '', category: undefined }\r\n    const [item, setItem] = useState(initialFormState)\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target\r\n        setItem({ ...item, [name]: value })\r\n    }    \r\n\r\n\r\n    return  (\r\n    <>\r\n\r\n      <Button onClick={handleShow}>Add a new task</Button>\r\n\r\n      <Modal centered show={show} onHide={handleClose}>\r\n\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add a new task</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n            <Form\r\n                onSubmit={(event: { preventDefault: () => void; }) => {\r\n                    event.preventDefault()\r\n                    if (!item.listitem) return\r\n                        props.addItem(item)\r\n                        setItem(initialFormState)\r\n                }}\r\n            >\r\n\r\n                <Form.Group>\r\n                    <Form.Control\r\n                        type=\"text\" \r\n                        name=\"listitem\"\r\n                        value={item.listitem}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"New task\" \r\n                    />      \r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Control\r\n                        type=\"text\" \r\n                        name=\"additionalnotes\"\r\n                        value={item.additionalnotes}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"Additional notes\" \r\n                    />      \r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Control\r\n                        type=\"date\"\r\n                        name=\"dateitem\"\r\n                        value={item.dateitem}\r\n                        onChange={handleInputChange}\r\n                        style={{'width':'70%'}}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Control \r\n                        as=\"select\"\r\n                        name=\"category\"\r\n                        value={item.category}\r\n                        onChange={handleInputChange}\r\n                        style={{'width':'70%'}}\r\n                    > \r\n                    {Object.entries(Categories).map(([k,v], i)=> (\r\n                        <option key={k}>{v}</option>\r\n                    ))}\r\n                    </Form.Control>     \r\n                </Form.Group>\r\n\r\n                <Button type=\"submit\" onClick={handleClose}>\r\n                     Done!\r\n                </Button>\r\n            </Form>\r\n        </Modal.Body>\r\n\r\n      </Modal>\r\n\r\n    </>\r\n    )       \r\n}\r\n\r\nexport default AddForm","import React, { useState, useEffect } from 'react'\r\nimport { Modal, Form, Row, Col } from 'react-bootstrap'\r\nimport { TaskButton, ActionButton } from '../../Styles/StyledComponents'\r\nimport { Item } from '../Tables/ListTable'\r\nimport Categories from '../Categories'\r\n\r\ninterface IProps {\r\n    currentItem?: Item\r\n    item: Item\r\n    editRow: Function\r\n    updateItem: Function\r\n    deleteItem: Function\r\n}\r\n\r\nconst DetailForm = (props: IProps) => {\r\n\r\n    const [editing, setEditing] = useState(false)\r\n    const [item, setItem] = useState(props.currentItem)\r\n    const [show, setShow] = useState(false)\r\n    const handleClose = () => { setShow(false); setEditing(false) }\r\n    const handleShow = () => { setShow(true); props.editRow(item) }\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target\r\n        setItem({ ...item, [name]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setItem(props.currentItem)\r\n    }, [props])\r\n\r\n    return  (\r\n    <>\r\n\r\n        <TaskButton \r\n            onClick={handleShow} \r\n            className={props.item.checked ? 'completed' : ''}\r\n        >\r\n            {props.item.listitem}\r\n        </TaskButton>\r\n    \r\n        <Modal centered show={show} onHide={handleClose}>\r\n    \r\n            <Modal.Header closeButton>\r\n              <Modal.Title>{editing ? 'Edit task' : 'Task details'}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            {editing ? (\r\n\r\n            <Modal.Body>\r\n                <Form\r\n                    onSubmit={(event: { preventDefault: () => void; }) => {\r\n                        event.preventDefault()\r\n                        handleClose()\r\n                        if (!props.item.listitem) return\r\n                        props.updateItem(props.item.id, item)\r\n                    }}\r\n                >\r\n\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type=\"text\" \r\n                            name=\"listitem\"\r\n                            //value={props.item.listitem}\r\n                            onChange={handleInputChange} \r\n                        />      \r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"additionalnotes\"\r\n                            //value={props.item.additionalnotes}\r\n                            onChange={handleInputChange}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type=\"date\"\r\n                            name=\"dateitem\"\r\n                            //value={item.dateitem}\r\n                            onChange={handleInputChange}\r\n                            style={{'width':'70%'}}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control \r\n                            as=\"select\"\r\n                            name=\"category\"\r\n                            value={props.item.category}\r\n                            onChange={handleInputChange}\r\n                            style={{'width':'70%'}}\r\n                        > \r\n                        {Object.entries(Categories).map(([k,v], i)=> (\r\n                            <option key={k}>{v}</option>\r\n                        ))}\r\n                        </Form.Control>     \r\n                    </Form.Group>\r\n\r\n                    <ActionButton type=\"submit\">\r\n                        Done!\r\n                    </ActionButton>\r\n\r\n                </Form>\r\n            </Modal.Body>\r\n\r\n            ) : (\r\n\r\n            <Modal.Body>\r\n                <Form>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={props.item.listitem}                            \r\n                            readOnly\r\n                        />     \r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={props.item.additionalnotes}\r\n                            readOnly\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type=\"date\"\r\n                            //value={props.item.dateitem}\r\n                            style={{'width':'60%'}}\r\n                            readOnly\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={props.item.category}\r\n                            style={{'width':'60%'}}\r\n                            readOnly\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <ActionButton \r\n                                onClick={() => setEditing(true)}                 \r\n                            >\r\n                                Edit\r\n                            </ActionButton>\r\n                        </Col>\r\n                        <Col style={{'paddingLeft': '0'}}>\r\n                            <ActionButton \r\n                                onClick={() => props.deleteItem(props.item.id)}                  \r\n                            >\r\n                                Delete\r\n                            </ActionButton>\r\n                        </Col>\r\n                        <Col></Col><Col></Col>\r\n                    </Row>\r\n\r\n                </Form>\r\n            </Modal.Body>\r\n\r\n            )}\r\n    \r\n        </Modal>\r\n    </>\r\n    )       \r\n}\r\n\r\nexport default DetailForm","import React, { Dispatch, SetStateAction } from 'react'\r\nimport { Button, Table, Tr, Td } from '../../Styles/StyledComponents'\r\nimport DetailForm from '../Forms/DetailForm'\r\n\r\n\r\nexport interface Item {\r\n    id?: number\r\n    checked?: boolean\r\n    listitem?: string\r\n    additionalnotes?: string\r\n    dateitem?: Date | string\r\n    category?: string\r\n    name?: string\r\n    length?: number\r\n  }\r\n\r\ninterface IProps {\r\n    list: Item[]\r\n    setList: Dispatch<SetStateAction<Object[]>>\r\n    map?: Function\r\n    deleteItem: Function\r\n    checkHandler: Function\r\n    editRow: Function\r\n    updateItem: Function\r\n    selectAll: Function\r\n    currentItem: Item\r\n  }\r\n\r\nconst ListTable = (props: Item & IProps) => {\r\n\r\n    return (\r\n    <>\r\n        <Table>\r\n            <thead>\r\n                <Tr>\r\n                <th>Tasks</th>\r\n                <th>Date</th>\r\n                </Tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.list.length > 0 ? (\r\n                props.list.map(item => (      \r\n                    <Tr key={item.id}>\r\n                    <Td><input\r\n                            type=\"checkbox\"\r\n                            style={{'marginRight': '10px'}} \r\n                            onChange={ev => {\r\n                                item.checked = ev.currentTarget.checked\r\n                            }}\r\n                            onClick={() => props.checkHandler(item.id)}\r\n                        />\r\n                        <DetailForm \r\n                            item={item}\r\n                            currentItem={props.currentItem} \r\n                            editRow={props.editRow} \r\n                            updateItem={props.updateItem} \r\n                            deleteItem={props.deleteItem}\r\n                        />\r\n                    </Td>\r\n                    <Td>\r\n                        {item.dateitem}\r\n                    </Td>\r\n                    </Tr>\r\n                ))\r\n                ) : (\r\n                    <Tr>\r\n                        <Td>No items yet.</Td>\r\n                        <Td></Td>\r\n                        <Td></Td>\r\n                    </Tr>\r\n                )}\r\n            </tbody>\r\n        </Table>\r\n\r\n        <Button\r\n            onClick={() => props.selectAll()}\r\n            style={{'marginRight':'10px'}}\r\n        >\r\n            Select All\r\n        </Button>\r\n\r\n        <Button\r\n            onClick={() => props.setList(props.list.filter(item => !item.checked))}\r\n        >\r\n            Delete All Checked\r\n        </Button>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default ListTable","import React, { useState } from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { lightTheme, darkTheme } from './Styles/Themes'\r\nimport { ActionButton, MenuButton } from './Styles/StyledComponents'\r\nimport AddForm from './Components/Forms/AddForm'\r\nimport ListTable, { Item } from './Components/Tables/ListTable'\r\n//import Categories from './Components/Categories'\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const itemArray = [\r\n    { id: 1, listitem: 'Wash clothes', additionalnotes: 'Remember to wash the shoes', dateitem: '2019-12-10', category: 'Personal' },\r\n    { id: 2, listitem: 'Take pets to the vet', additionalnotes: 'Ask to brush their teeth too', dateitem: undefined, category: 'Personal'},\r\n    { id: 3, listitem: 'Deposit money', additionalnotes: '', dateitem: undefined, category: 'Personal' },\r\n  ]\r\n\r\n  const [list, setList] = useState<Item[]>(itemArray)\r\n  const initialFormState = { id: undefined, listitem: '', additionalnotes: '', dateitem: undefined, category: undefined }\r\n  const [currentItem, setCurrentItem] = useState<Item>(initialFormState)\r\n  const [theme, setTheme] = useState('light')\r\n\r\n\r\n  const toggleTheme = () => {\r\n    if (theme === 'light') {\r\n      setTheme('dark');\r\n    } else {\r\n      setTheme('light');\r\n    }\r\n  }\r\n\r\n  const rootStyle = (\r\n    (theme === 'light') ? \r\n      {'background':'white', 'color': 'grey'} \r\n      : \r\n      {'background':'grey', 'color': 'white'}\r\n  )\r\n\r\n  const addItem = (item: Item) => {\r\n    item.id = list.length + 1\r\n    setList([...list, item])\r\n  }\r\n\r\n  const deleteItem = (id: Item) => {\r\n    setList(list.filter((item: Item) => item.id !== id))\r\n  }\r\n\r\n  const checkHandler = (id: Item) => {\r\n    setList(\r\n      list.map (item => {\r\n        if (item.id === id) {\r\n            item.checked = !item.checked\r\n        }\r\n        return item\r\n      })\r\n    )\r\n  }\r\n\r\n  const selectAll = () => {\r\n    setList(\r\n      list.filter (item => {\r\n        if ((item.checked === undefined) || (item.checked === false)) {\r\n            item.checked = true\r\n        }\r\n        else { item.checked = false }\r\n        return item\r\n      })\r\n    )\r\n  }\r\n\r\n  // const listFilter = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n  //   setList(\r\n  //     list.filter (item => \r\n  //       item.category === e.currentTarget.value\r\n  //     )\r\n  //   )\r\n  //   console.log(list)\r\n  // }\r\n\r\n  const editRow = (item: Item) => {\r\n    setCurrentItem({ \r\n      id: item.id, \r\n      checked: item.checked, \r\n      listitem: item.listitem, \r\n      additionalnotes: item.additionalnotes,\r\n      category: item.category \r\n    })\r\n  };\r\n\r\n  const updateItem = (id: Item, updatedItem: Item) => {\r\n    setList(list.map(item => (item.id === id ? updatedItem : item)))\r\n  }\r\n\r\n\r\n  return (\r\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\r\n      <Container className=\"root\" style={rootStyle}>\r\n\r\n        <Row>\r\n          <Col> \r\n            <AddForm addItem={addItem} />\r\n          </Col>\r\n          <Col style={{'textAlign':'right'}}>\r\n            <ActionButton\r\n              onClick={toggleTheme}\r\n            >\r\n              {theme === 'light' ? 'Night Mode' : 'Light Mode'}\r\n            </ActionButton>\r\n          </Col>\r\n        </Row>\r\n\r\n        <br />\r\n\r\n        <Row style={{'marginTop':'20px'}}>\r\n          <Col style={{'textAlign':'center'}}>\r\n            <MenuButton key={1} /*value={Object.values(Categories)[0]} onClick={listFilter}*/>Family</MenuButton>\r\n            <MenuButton key={2} /*value={Object.values(Categories)[1]} onClick={listFilter}*/>Personal</MenuButton>\r\n            <MenuButton key={3} /*value={Object.values(Categories)[2]} onClick={listFilter}*/>Travel</MenuButton>\r\n            <MenuButton key={4} /*value={Object.values(Categories)[3]} onClick={listFilter}*/>Work</MenuButton>\r\n            <MenuButton key={5} /*onClick={listFilter}*/ style={{'border': 'none'}}>View All</MenuButton>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <ListTable \r\n              list={list} \r\n              setList={setList} \r\n              deleteItem={deleteItem}\r\n              checkHandler={checkHandler}\r\n              editRow={editRow}\r\n              updateItem={updateItem}\r\n              currentItem={currentItem}\r\n              selectAll={selectAll}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}